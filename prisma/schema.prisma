
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  workouts Workout[]
  plans    Plan[]

  @@map("users")
}

// Workout types (Cardio, Strength, Yoga, etc.)
model WorkoutType {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(50)
  description String @db.Text
  color       String @db.VarChar(7) // Hex color code

  // Relations
  workouts Workout[]
  planDays PlanDay[]

  @@map("workout_types")
}

// Individual workout sessions
model Workout {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  workoutTypeId Int     @map("workout_type_id")
  durationMin  Int      @map("duration_min")
  calories     Int?
  performedAt  DateTime @map("performed_at")
  notes        String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutType WorkoutType @relation(fields: [workoutTypeId], references: [id])

  // Indexes for performance
  @@index([userId, performedAt], map: "idx_user_date")
  @@index([workoutTypeId], map: "idx_workout_type")
  @@map("workouts")
}

// Weekly workout plans (for AI Coach feature)
model Plan {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  title       String   @db.VarChar(200)
  description String?  @db.Text
  weekStart   DateTime @map("week_start") @db.Date
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planDays PlanDay[]

  @@index([userId, weekStart], map: "idx_user_week")
  @@map("plans")
}

// Daily workout plans within a weekly plan
model PlanDay {
  id            Int     @id @default(autoincrement())
  planId        Int     @map("plan_id")
  dayOfWeek     Int     @map("day_of_week") // 0 = Sunday, 1 = Monday, etc.
  workoutTypeId Int     @map("workout_type_id")
  targetDuration Int    @map("target_duration") // in minutes
  targetCalories Int?   @map("target_calories")
  description   String? @db.Text
  isCompleted   Boolean @default(false) @map("is_completed")

  // Relations
  plan        Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)
  workoutType WorkoutType @relation(fields: [workoutTypeId], references: [id])

  @@index([planId, dayOfWeek], map: "idx_plan_day")
  @@map("plan_days")
}